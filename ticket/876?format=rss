<?xml version="1.0"?>
<rss xmlns:dc="http://purl.org/dc/elements/1.1/" version="2.0">
  <channel>
    <title>CKAN: Ticket #876: Support sqlite as a database backend for CKAN</title>
    <link>http://localhost/ticket/876</link>
    <description>&lt;p&gt;
Among other things this will allow the tests to run much quicker.
&lt;/p&gt;
</description>
    <language>en-us</language>
    <image>
      <title>CKAN</title>
      <url>http://assets.okfn.org/p/ckan/img/ckan_logo_shortname.png</url>
      <link>http://localhost/ticket/876</link>
    </image>
    <generator>Trac 0.12.3</generator>
    <item>
      
        <dc:creator>kindly@…</dc:creator>

      <pubDate>Tue, 21 Dec 2010 00:25:33 GMT</pubDate>
      <title></title>
      <link>http://localhost/ticket/876#comment:1</link>
      <guid isPermaLink="false">http://localhost/ticket/876#comment:1</guid>
      <description>
        &lt;p&gt;
I have looked into this already so I can give you a head start.  I am working on a project that uses many backends so I have some experience. So here is what I have found so far.
&lt;/p&gt;
&lt;h2 id="nestedtransactions"&gt;nested transactions&lt;/h2&gt;
&lt;p&gt;
VDM does not support sqlite, as it uses nested transactions.  I do not think vdm needs nested transactions. It can use a flush instead.  Here is the patch that works. All vdm tests pass.
&lt;/p&gt;
&lt;pre class="wiki"&gt;--- a/vdm/sqlalchemy/base.py	Sat Sep 11 23:06:26 2010 +0000
+++ b/vdm/sqlalchemy/base.py	Mon Dec 20 16:16:34 2010 +0000
@@ -40,9 +40,8 @@
         self.setattr(session, 'HEAD', True)
         self.setattr(session, 'revision', revision)
         if revision.id is None:
-            session.begin_nested()
             session.add(revision)
-            session.commit()
+            session.flush()
&lt;/pre&gt;&lt;h2 id="indexes"&gt;indexes&lt;/h2&gt;
&lt;p&gt;
The index file 021_postgres_upgrade.sql in the migrate repository will not run as it uses syntax particular to postgres. Another will need to be made thats similar. sqlite does not support complex indexes like upper(text), so a work around will need to be found.
&lt;/p&gt;
&lt;h2 id="unicode"&gt;unicode&lt;/h2&gt;
&lt;p&gt;
The harvesting returns utf8 encoded strings and pysqlite dbapi only supports python unicode objects (as far as I can tell).  There will need to be a process in converting all strings that get into the database with string.decode("utf8")
&lt;/p&gt;
&lt;h2 id="dates"&gt;dates&lt;/h2&gt;
&lt;p&gt;
Have not looked into this one too much. However, as sqlite stores everything as strings the timestamps appear to be failing on conversion back into python.
&lt;/p&gt;
&lt;p&gt;
I have solved the above two issues before by adding attribute extensions to sqlalchemy mappers to do the conversions without effecting too much code.
&lt;/p&gt;
&lt;h2 id="inmemorysqlite"&gt;in memory sqlite&lt;/h2&gt;
&lt;p&gt;
Some tests need to change in order to make sure the database is created first because the database gets lost each time.  In the tests that I have made pass, they run in about a seventh of the time as they do on postgres.
&lt;/p&gt;
&lt;h2 id="Otherthingstokeepinmind."&gt;Other things to keep in mind.&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;Need a new flag in test.ini to remove full text indexing completely, or always use it with solr.
&lt;/li&gt;&lt;li&gt;There are enough incompatibilities between the databases that you would also want to test against postgres as well, at least before a release.
&lt;/li&gt;&lt;li&gt;I would probably upgrade sqlalchemy first, so you will not have to the changes twice. The new versions are significantly faster too.
&lt;/li&gt;&lt;li&gt;I have submitted a patch to &lt;a class="closed ticket" href="http://localhost/ticket/868" title="enhancement: Test improvements (closed: fixed)"&gt;#868&lt;/a&gt; that makes the tests run about 2.5 times as fast and I think there are more low hanging fruit if the aim is test speed.
&lt;/li&gt;&lt;/ul&gt;
      </description>
      <category>Ticket</category>
    </item><item>
      
        <dc:creator>sebbacon</dc:creator>

      <pubDate>Tue, 21 Dec 2010 09:34:24 GMT</pubDate>
      <title></title>
      <link>http://localhost/ticket/876#comment:2</link>
      <guid isPermaLink="false">http://localhost/ticket/876#comment:2</guid>
      <description>
        &lt;p&gt;
Thanks for the info!
&lt;/p&gt;
&lt;p&gt;
Re. nested transactions.  I am getting repeated non-deterministic test failures against sqlite (and indeed postgres, but these failures appear more frequent against sqlite).  One of them I seemed to be able to get rid of by eliminating the savepoint as per your first point.  However, it appears that sqlite &lt;a class="ext-link" href="http://www.sqlite.org/lang_savepoint.html"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;does&lt;/a&gt; support savepoints; to demonstrate it, the following test code appears to work in the latest sqlalchemy:
&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sqlalchemy&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sqlalchemy.orm&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
db &lt;span class="o"&gt;=&lt;/span&gt; create_engine&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'sqlite:///'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
metadata &lt;span class="o"&gt;=&lt;/span&gt; MetaData&lt;span class="p"&gt;(&lt;/span&gt;db&lt;span class="p"&gt;)&lt;/span&gt;
users &lt;span class="o"&gt;=&lt;/span&gt; Table&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'users'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; metadata&lt;span class="p"&gt;,&lt;/span&gt;
    Column&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'user_id'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; Integer&lt;span class="p"&gt;,&lt;/span&gt; primary_key&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    Column&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'name'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; String&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;)),)&lt;/span&gt;
users&lt;span class="o"&gt;.&lt;/span&gt;create&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;User&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;
usermapper &lt;span class="o"&gt;=&lt;/span&gt; mapper&lt;span class="p"&gt;(&lt;/span&gt;User&lt;span class="p"&gt;,&lt;/span&gt; users&lt;span class="p"&gt;)&lt;/span&gt;
Session &lt;span class="o"&gt;=&lt;/span&gt; sessionmaker&lt;span class="p"&gt;()&lt;/span&gt;
session &lt;span class="o"&gt;=&lt;/span&gt; Session&lt;span class="p"&gt;()&lt;/span&gt;
fred &lt;span class="o"&gt;=&lt;/span&gt; User&lt;span class="p"&gt;()&lt;/span&gt;
fred&lt;span class="o"&gt;.&lt;/span&gt;name &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Fred"&lt;/span&gt;
sue &lt;span class="o"&gt;=&lt;/span&gt; User&lt;span class="p"&gt;()&lt;/span&gt;
sue&lt;span class="o"&gt;.&lt;/span&gt;name &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Sue"&lt;/span&gt;
amy &lt;span class="o"&gt;=&lt;/span&gt; User&lt;span class="p"&gt;()&lt;/span&gt;
amy&lt;span class="o"&gt;.&lt;/span&gt;name &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Amy"&lt;/span&gt;
session&lt;span class="o"&gt;.&lt;/span&gt;add&lt;span class="p"&gt;(&lt;/span&gt;fred&lt;span class="p"&gt;)&lt;/span&gt;
session&lt;span class="o"&gt;.&lt;/span&gt;add&lt;span class="p"&gt;(&lt;/span&gt;amy&lt;span class="p"&gt;)&lt;/span&gt;
session&lt;span class="o"&gt;.&lt;/span&gt;begin_nested&lt;span class="p"&gt;()&lt;/span&gt;
session&lt;span class="o"&gt;.&lt;/span&gt;add&lt;span class="p"&gt;(&lt;/span&gt;sue&lt;span class="p"&gt;)&lt;/span&gt;
session&lt;span class="o"&gt;.&lt;/span&gt;rollback&lt;span class="p"&gt;()&lt;/span&gt;
session&lt;span class="o"&gt;.&lt;/span&gt;commit&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;assert&lt;/span&gt; session&lt;span class="o"&gt;.&lt;/span&gt;query&lt;span class="p"&gt;(&lt;/span&gt;User&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;count&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;"OK"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;
So, while I agree they're not needed, I'm not sure they're a problem.  What do you think?  Also, have you seen non-deterministic test errors like this?
&lt;/p&gt;
      </description>
      <category>Ticket</category>
    </item><item>
      
        <dc:creator>kindly@…</dc:creator>

      <pubDate>Tue, 21 Dec 2010 13:55:11 GMT</pubDate>
      <title></title>
      <link>http://localhost/ticket/876#comment:3</link>
      <guid isPermaLink="false">http://localhost/ticket/876#comment:3</guid>
      <description>
        &lt;p&gt;
I have read quite a lot of people having problems with savepoints with sqlite and thought they were not supported on sqlalchemy.  They are at least not consistant with postgres ones.  I may well be out of date on this.
Here is an &lt;a class="ext-link" href="http://groups.google.com/group/sqlalchemy/browse_thread/thread/dc9d1b61044bf730/65a62a33ec313842?lnk=gst&amp;amp;q=no+such+savepoint#65a62a33ec313842"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;example&lt;/a&gt; even though its a bit old.
&lt;/p&gt;
&lt;p&gt;
I did get some non deterninistic errors, the above seemed to fix them. A failed subtransaction is not handled well by sqlalchemy and I think this causes knockon effects due to the unresolved transaction.  I would stay well clear of them entirely if possible.
&lt;/p&gt;
&lt;p&gt;
What are the errors you are getting??
&lt;/p&gt;
&lt;p&gt;
My 2 cents. ignore me at will...
&lt;/p&gt;
&lt;p&gt;
I would think about using a different backend for testing than production. &lt;a class="ext-link" href="http://stackoverflow.com/questions/2716847/sqlalchemy-sqlite-for-testing-and-postgresql-for-development-how-to-port"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;look here&lt;/a&gt;.
If you want to support both then you should test on both.
There are simple ways to scrape a few more minutes off the tests.  If you want real speed, then a multiprocess solution (with a database per core) would be sensible if a bit tricky.
&lt;/p&gt;
      </description>
      <category>Ticket</category>
    </item><item>
      
        <dc:creator>anonymous</dc:creator>

      <pubDate>Fri, 24 Dec 2010 10:54:48 GMT</pubDate>
      <title></title>
      <link>http://localhost/ticket/876#comment:4</link>
      <guid isPermaLink="false">http://localhost/ticket/876#comment:4</guid>
      <description>
        &lt;p&gt;
Thanks for your feedback, very useful.
&lt;/p&gt;
&lt;p&gt;
I don't really agree with the people in the linked discussion who say it's pointless testing against a different database from production.
&lt;/p&gt;
&lt;p&gt;
The goal here is to make it easy enough for people to run as many tests as possible that they actually do so.  Even 15 minutes is too long in that case.  With sqlite we can get it in at under 5 minutes.  I would also like to identify the longest running tests (which I would characterise as "functional" or "integration" tests and make them run as a separate suite, and then encourage a culture of writing true unit tests before functional tests, so that running unit tests can happen in 1 minute and be part of the regular development cycle.
&lt;/p&gt;
&lt;p&gt;
That's no replacement for also running *all* tests periodically, and also running tests under postgres, which we can continue to do on the continuous integration server.
&lt;/p&gt;
&lt;p&gt;
Longer term I agree that it would be better to run local tests against postgres too, but that will I think involve refactoring many of the tests.
&lt;/p&gt;
      </description>
      <category>Ticket</category>
    </item><item>
      
        <dc:creator>anonymous</dc:creator>

      <pubDate>Fri, 24 Dec 2010 19:25:14 GMT</pubDate>
      <title></title>
      <link>http://localhost/ticket/876#comment:5</link>
      <guid isPermaLink="false">http://localhost/ticket/876#comment:5</guid>
      <description>
        &lt;p&gt;
I agree with all your points about testing apart form using sqlite, especially splitting out the functional tests and continuous integration.
&lt;/p&gt;
&lt;blockquote class="citation"&gt;
&lt;p&gt;
Longer term I agree that it would be better to run local tests against postgres too, but that will I think involve refactoring many of the tests.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Well there are two options
&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;refactor the tests
&lt;/li&gt;&lt;li&gt;refactor the code to use sqlite and postress
&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;
It is a value judgment as to which is more complicated. I personally think 2 is more complicated but may be wrong on that. The real danger with 2 is that you are needlessly adding complication to production code, with 1 you are only changing the tests.
&lt;/p&gt;
&lt;p&gt;
Upgrading to sqlalchemy 0.5+ should happen first regardless.  You will need upto date documentation.
&lt;/p&gt;
&lt;p&gt;
There is another option too.  Put the postgres data directory on tempfs/ramfs and turn off durability &lt;a class="ext-link" href="http://www.postgresql.org/docs/9.0/static/non-durability.html"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;here&lt;/a&gt;.  We would need a way to db init before the tests where run (or) at boot). This may be the best of both worlds.
&lt;/p&gt;
&lt;p&gt;
Anyway Happy xmas!!
&lt;/p&gt;
&lt;p&gt;
&lt;/p&gt;
      </description>
      <category>Ticket</category>
    </item><item>
      
        <dc:creator>dread</dc:creator>

      <pubDate>Tue, 11 Jan 2011 13:51:29 GMT</pubDate>
      <title>status changed; resolution set</title>
      <link>http://localhost/ticket/876#comment:6</link>
      <guid isPermaLink="false">http://localhost/ticket/876#comment:6</guid>
      <description>
          &lt;ul&gt;
            &lt;li&gt;&lt;strong&gt;status&lt;/strong&gt;
                changed from &lt;em&gt;new&lt;/em&gt; to &lt;em&gt;closed&lt;/em&gt;
            &lt;/li&gt;
            &lt;li&gt;&lt;strong&gt;resolution&lt;/strong&gt;
                set to &lt;em&gt;fixed&lt;/em&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;p&gt;
Seb and David have completed this I believe. I've merged the changes into core CKAN in cset:68d63fda4814.
&lt;/p&gt;
      </description>
      <category>Ticket</category>
    </item>
 </channel>
</rss>