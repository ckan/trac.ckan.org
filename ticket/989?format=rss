<?xml version="1.0"?>
<rss xmlns:dc="http://purl.org/dc/elements/1.1/" version="2.0">
  <channel>
    <title>CKAN: Ticket #989: Extending the model from plugins</title>
    <link>http://localhost/ticket/989</link>
    <description>&lt;p&gt;
We need to support extending the model from plugins. This could involve:
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Adding a plugin hook to extend the mapper
&lt;/li&gt;&lt;li&gt;Adding an upgrade hook for plugin schema migrations
&lt;/li&gt;&lt;li&gt;Documenting how this is to be done
&lt;/li&gt;&lt;li&gt;Find a way to avoid conflicts
&lt;/li&gt;&lt;/ul&gt;</description>
    <language>en-us</language>
    <image>
      <title>CKAN</title>
      <url>http://assets.okfn.org/p/ckan/img/ckan_logo_shortname.png</url>
      <link>http://localhost/ticket/989</link>
    </image>
    <generator>Trac 0.12.3</generator>
    <item>
      
        <dc:creator>kindly</dc:creator>

      <pubDate>Mon, 14 Feb 2011 16:19:23 GMT</pubDate>
      <title></title>
      <link>http://localhost/ticket/989#comment:1</link>
      <guid isPermaLink="false">http://localhost/ticket/989#comment:1</guid>
      <description>
        &lt;p&gt;
It would be nice to know some use cases.   I think that plugins should control their own storage, or share a storage that is designed to be flexible (mongo, redis ...).
&lt;/p&gt;
&lt;p&gt;
We do not seem to be able to keep our current migrate repository in sync let alone add plugins to the mix.
&lt;/p&gt;
      </description>
      <category>Ticket</category>
    </item><item>
      
        <dc:creator>pudo</dc:creator>

      <pubDate>Mon, 14 Feb 2011 16:26:58 GMT</pubDate>
      <title></title>
      <link>http://localhost/ticket/989#comment:2</link>
      <guid isPermaLink="false">http://localhost/ticket/989#comment:2</guid>
      <description>
        &lt;p&gt;
Kindly, I agree - it would be much preferable to have independent storage for plugins and this would be easy to do if we were using another type of storage already. As it stands, however, our storage mechanism is SQL. I think we should use it for what it is as much as possible and do the weird, vertical stuff (k,v tables, swapping to redis) only if we really need it. For everything else: lets use SQL as it was intended.
&lt;/p&gt;
&lt;p&gt;
Examples:
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;We want to develop an apps catalogue as a CKAN plugin. While we could certainly put this in Redis, there is no reason why we can't have the following table: application (id, name, title, description, author, project_url, site_url, code_url, image).
&lt;/li&gt;&lt;li&gt;A watchlist plugin could essentially work on UUIDs alone. What you'd end up with is something like this: watch (id, user, scope_id).
&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;
Re migrations you're right, but my first intention would be to handle that seperatly for each plugin (i.e. they need to have their own migration repositories that they keep track of, e.g. via an apps_migrate_version table)
&lt;/p&gt;
      </description>
      <category>Ticket</category>
    </item><item>
      
        <dc:creator>kindly</dc:creator>

      <pubDate>Mon, 14 Feb 2011 18:03:40 GMT</pubDate>
      <title></title>
      <link>http://localhost/ticket/989#comment:3</link>
      <guid isPermaLink="false">http://localhost/ticket/989#comment:3</guid>
      <description>
        &lt;p&gt;
I do not think we need to 'extend the model' if you intend to make the migrations separate. If the schema is decoupled, then there are no problems.  So each plugin can have its own model and use sqlalchemy independently i.e have their own metadata, classes and mappers.  They do not have to even use sqlalchemy.
&lt;/p&gt;
&lt;p&gt;
What I mean is that there is no need to do anything apart from.
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Agree on a naming convention of the plugin tables (including their own migrate table each)
&lt;/li&gt;&lt;li&gt;Agree to the rule that no plugin can add a column to an existing table.
&lt;/li&gt;&lt;li&gt;Agree that no table can have a (database level) foreign key constraint between the core tables and itself in either direction.  They *can* have implied sqlalchemy level joins.
&lt;/li&gt;&lt;li&gt;Maybe have a hook that on db upgrade all plugins are upgraded.
&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;
Each plugin will have to redefine the tables, classes and mappers they need to join onto the core tables themselves. reusing/extending the core model will not be worth the trouble.
&lt;/p&gt;
&lt;p&gt;
This seems to cover your use cases and this way everything is nicely decoupled. Best of all there is very little work to do...
&lt;/p&gt;
      </description>
      <category>Ticket</category>
    </item><item>
      
        <dc:creator>thejimmyg</dc:creator>

      <pubDate>Mon, 21 Feb 2011 12:53:52 GMT</pubDate>
      <title>owner set</title>
      <link>http://localhost/ticket/989#comment:4</link>
      <guid isPermaLink="false">http://localhost/ticket/989#comment:4</guid>
      <description>
          &lt;ul&gt;
            &lt;li&gt;&lt;strong&gt;owner&lt;/strong&gt;
              set to &lt;em&gt;kindly&lt;/em&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
      </description>
      <category>Ticket</category>
    </item><item>
      
        <dc:creator>kindly</dc:creator>

      <pubDate>Mon, 28 Feb 2011 09:29:13 GMT</pubDate>
      <title>milestone changed</title>
      <link>http://localhost/ticket/989#comment:5</link>
      <guid isPermaLink="false">http://localhost/ticket/989#comment:5</guid>
      <description>
          &lt;ul&gt;
            &lt;li&gt;&lt;strong&gt;milestone&lt;/strong&gt;
                changed from &lt;em&gt;ckan-v1.4-sprint-3&lt;/em&gt; to &lt;em&gt;ckan-v1.4&lt;/em&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
      </description>
      <category>Ticket</category>
    </item><item>
      
        <dc:creator>kindly</dc:creator>

      <pubDate>Mon, 16 May 2011 18:34:11 GMT</pubDate>
      <title>milestone changed; repo, state, theme set</title>
      <link>http://localhost/ticket/989#comment:6</link>
      <guid isPermaLink="false">http://localhost/ticket/989#comment:6</guid>
      <description>
          &lt;ul&gt;
            &lt;li&gt;&lt;strong&gt;repo&lt;/strong&gt;
                set to &lt;em&gt;ckan&lt;/em&gt;
            &lt;/li&gt;
            &lt;li&gt;&lt;strong&gt;state&lt;/strong&gt;
                set to &lt;em&gt;draft&lt;/em&gt;
            &lt;/li&gt;
            &lt;li&gt;&lt;strong&gt;theme&lt;/strong&gt;
                set to &lt;em&gt;none&lt;/em&gt;
            &lt;/li&gt;
            &lt;li&gt;&lt;strong&gt;milestone&lt;/strong&gt;
                changed from &lt;em&gt;ckan-v1.4&lt;/em&gt; to &lt;em&gt;ckan-v1.5&lt;/em&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
      </description>
      <category>Ticket</category>
    </item><item>
      
        <dc:creator>shevski</dc:creator>

      <pubDate>Fri, 08 Jul 2011 11:55:43 GMT</pubDate>
      <title>milestone deleted</title>
      <link>http://localhost/ticket/989#comment:7</link>
      <guid isPermaLink="false">http://localhost/ticket/989#comment:7</guid>
      <description>
          &lt;ul&gt;
            &lt;li&gt;&lt;strong&gt;milestone&lt;/strong&gt;
                &lt;em&gt;ckan-v1.5&lt;/em&gt; deleted
            &lt;/li&gt;
          &lt;/ul&gt;
      </description>
      <category>Ticket</category>
    </item><item>
      
        <dc:creator>kindly</dc:creator>

      <pubDate>Mon, 18 Jun 2012 15:45:11 GMT</pubDate>
      <title>milestone set</title>
      <link>http://localhost/ticket/989#comment:8</link>
      <guid isPermaLink="false">http://localhost/ticket/989#comment:8</guid>
      <description>
          &lt;ul&gt;
            &lt;li&gt;&lt;strong&gt;milestone&lt;/strong&gt;
                set to &lt;em&gt;ckan-future&lt;/em&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
      </description>
      <category>Ticket</category>
    </item>
 </channel>
</rss>