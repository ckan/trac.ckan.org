= Welcome to the CKAN Software Project at ckan.org =

[[PageOutline(0-6,Table of Contents,inline)]]

= What It Is =

CKAN is a '''registry or catalogue system for datasets or other "knowledge" resources'''. CKAN aims to make it '''easy to find, share and reuse open content and data''', especially in ways that are '''machine automatable'''.

Those familiar with software services like freshmeat, CPAN, or apt can think of CKAN as providing an analogous service for content and data.

The CKAN software is used to run the CKAN service: http://www.ckan.net/ and is also running the catalogue behind  http://data.gov.uk/ as well as more than 10 other sites around the world including in Germany  http://de.ckan.net / http://offenedaten.de/, Canada  http://ca.ckan.net/ / http://datadotgc.ca, France  http://fr.ckan.net. CKAN is an Open Knowledge Foundation project. Here's a [http://wiki.okfn.org/ckan/instances full list of CKAN instances].

= Code and Docs =

CKAN code is in a mercurial repository here: http://bitbucket.org/okfn/ckan

This Trac service is being used to track CKAN project developments.

Documentation can be found at:

  * [http://wiki.okfn.org/ckan/doc/ User Documentation]
  * [http://knowledgeforge.net/ckan/doc/ckan/ Developer Documentation]
  * [http://packages.python.org/datapkg/ DataPkg Documentation]
  * [http://pypi.python.org/pypi/ckanclient CKAN Client]
  * [http://knowledgeforge.net/ckan/ckanext/file/default/README.txt CKAN Ext]

The [http://semantic.ckan.net/ CKAN Linked Data Service] us made using the
CKAN API and the following software:

  * [http://pypi.python.org/pypi/ckanrdf CKAN RDF Generator]
  * [http://packages.python.org/autoneg/ HTTP Content-Type Autonegotiation]

= Features =

Major features:

  * Free/Open-Source software, written in Python
  * Domain Model: Data and content "packages" with a standard set of core metadata and support for adding unlimited ''arbitrary'' additional metadata
    * All package data is automatically versioned in a wiki-like manner
    * Tagging of packages
    * Groups for controlled categorization of packages
    * Ratings
    * Unlimited associated package resources ('download urls') with additional metadata (format, description etc) 
    * Package relationships
  * Web user interface (WUI)
    * Package adding, editing, listing etc
    * Wiki features such as "Recent Changes", edit histories, purging of changes etc
    * User management and user home pages
  * API: full JSON-based API (with python client) - contributed clients in PHP and Perl
    * RDF version also available
    * CKAN is easy to use as your "catalogue" backend
  * Search: Full searchability (including full-text support) via API and WUI
  * Access control: fine-grained access control for packages and group
  * Messaging: integrate asynchronous AMQP messaging and queuing
  * INSPIRE support
  * Federated structure: easily set up new instances with common search etc
  * Additional interfaces:
    * Excel importer (upload dataset/package information direct from a spreadsheet)
    * Fully featured command line client (datapkg)

Coming soon:
  * See the tickets for more ...

= Vision and Design =

This diagram illustrates our overall "debian of data" vision of which CKAN (as the registry) is a central part:

[[Image(ckan-vision.png)]]

== Design Pages ==

 * PackageResources
 * DataPkgUseCases
 * UiReviewNotes
 * [wiki:LOD2UseCases Use Cases for LOD2]
 * AccessControl
 * SyncingInstances (and DistributingChanges)
 * SearchEngine
 * PushAlert
 * BackgroundWorkers
 * [wiki:Extensions Extensions]
 
= Project Processes and Policies =

 * CheckinPolicy
 * VersioningPolicy
 * BranchingPolicy
 * ReleaseProcess

= Work in Related Areas =

  * Debian / R
  * [http://www.ivoa.net/ Virtual Observatory]
  * PyPI / Gems / CPAN

= User Interface =
 * [wiki:UIRedesign2010 Redesign notes (December 2010)]
